#!/usr/bin/env node

import "..";
import ADONEApp from "adone/lib/app/adone";

const {
    cli,
    is,
    path,
    app
} = adone;
const { chalk } = cli;

const {
    subsystem
} = app;

const command = (...args) => path.join(__dirname, "..", "lib", "commands", ...args);

@subsystem({
    subsystems: [
        {
            name: "adone",
            group: "common",
            description: "ADONE toolkit",
            subsystem: command("adone")
        },
        {
            name: "dashboard",
            group: "common",
            description: "KRI web dashboard",
            subsystem: command("dashboard")
        },
        {
            name: ["github", "gh"],
            group: "common",
            description: "GitHub tools",
            subsystem: command("github")
        },
        {
            name: "inspect",
            group: "common",
            description: "Inspect namespace/object",
            subsystem: command("inspect")
        },
        {
            name: "node",
            group: "common",
            description: "Node.js toolkit",
            subsystem: command("node")
        },
        {
            name: ["package", "pkg"],
            group: "common",
            description: "Manage executable packages",
            subsystem: command("package")
        },
        {
            name: "realm",
            group: "common",
            description: "Realm management",
            subsystem: command("realm")
        },
        {
            name: "self",
            group: "common",
            description: "Self management",
            subsystem: command("self")
        }
    ]
})
class KRIApp extends ADONEApp {
    async onConfigure() {
        if (typeof global.__kri__ !== "undefined") {
            // override requireAddon
            const init = global.__kri__.initSubsystem;
            // force call
            adone.module.requireAddon("#");
            adone.requireAddon("#");

            adone.module.requireAddon = adone.requireAddon = (addonPath) => {
                if (!path.isAbsolute(addonPath)) {
                    throw Error("Path to addon should be absolute");
                }
                if (init.isVirtual(addonPath)) {
                    const addonName = `${adone.std.crypto.createHash("sha1").update(`${addonPath}${kri.package.version}${adone.package.version}${process.version}`).digest("hex")}.node`;
                    const realPath = path.join(kri.HOME_PATH, "addons", addonName);
                    try {
                        return require(realPath);
                    } catch (err) {
                        adone.fs.mkdirpSync(path.dirname(realPath));
                        adone.fs.copyFileSync(addonPath, realPath);
                        return require(realPath);
                    }
                }

                return require(addonPath);
            };
        }

        this.replBanner = `${chalk.bold.hex("ffeb3b")("KRI")} v${kri.package.version}, ${chalk.bold.hex("ab47bc")("ADONE")} v${adone.package.version}, ${chalk.bold.hex("689f63")("Node.JS")} ${process.version}`;

        return super.onConfigure();
    }
}

app.run(KRIApp, {
    useArgs: true,
    version: `KRI: v${kri.package.version}
ADONE: v${adone.package.version}
Node.js: ${process.version}
V8: v${process.versions.v8}
uv: v${process.versions.uv}`
});
